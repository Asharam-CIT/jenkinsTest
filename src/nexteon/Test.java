package nexteon;

import java.io.IOException;
import java.io.StringReader;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

public class Test {
	public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException {
		String str="<?xml version=\"1.0\" encoding=\"UTF-8\"?><Resp status=\"-1\" ret=\"N\" code=\"5ce7827e87674c26804bea4f9ddd347b\" txn=\"UKC:DOITHRGOVAUTH201808232010915335\" ts=\"2018-08-20T13:24:32.097+05:30\" err=\"K-100\"><kycRes>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48S3ljUmVzIGNvZGU9IjVjZTc4MjdlODc2NzRjMjY4MDRiZWE0ZjlkZGQzNDdiIiBlcnI9IkstMTAwIiByZXQ9Ik4iIHRzPSIyMDE4LTA4LTIwVDEzOjI0OjMyLjA5NyswNTozMCIgdHhuPSJVS0M6RE9JVEhSR09WQVVUSDIwMTgwODIzMjAxMDkxNTMzNSI+PFJhcj5QRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUJsYm1OdlpHbHVaejBpVlZSR0xUZ2lQejQ4UVhWMGFGSmxjeUJqYjJSbFBTSTFZMlUzT0RJM1pUZzNOamMwWXpJMk9EQTBZbVZoTkdZNVpHUmtNelEzWWlJZ1pYSnlQU0kxTURFaUlHbHVabTg5SWpBMGV6QXhNREF3TlRneU0yNVhiamx0ZW5GQmIxbzFiVFI0VWxGU01WTTNhWGxuZEU0NVVHWlBVU3RQUlU1bU1VOXZNMlo1WkhCWlRFZHpUbU5ST0RRcmJ6RTRZWGRMYm5GWmVTeEJMREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdMREF4TURBd01EQXdNREF3TURBd01UQXNUa0VzVGtFc1RrRXNUa0VzVGtFc1RrRXNNaTQxTEdVek9EQTJZVE13T0RabU5EZGxZams0TjJWak5qZ3haVEJqWlRrd1ptRmlaREE1TVRNMlltVTBZVEkwTWpNM1lUUXdPV1V6T0dFellURm1NRFpqTlRBc09URmxNVEl6TldWbFpqVXpOR1U1TkRBeVl6STVOMkkwTmpKbFpEazVOalV5TW1Oak56ZGlOR0ZsTnpKbE9ETXdOamt3WWpKbU9UbGhNMkUwWmpRMFl5dzVNV1V4TWpNMVpXVm1OVE0wWlRrME1ESmpNamszWWpRMk1tVmtPVGsyTlRJeVkyTTNOMkkwWVdVM01tVTRNekEyT1RCaU1tWTVPV0V6WVRSbU5EUmpMRTVCTEU1QkxFNUJMRTVCTEU1QkxFNUJMRTVCTEU1QkxFNUJMRTVCTEN4T1FTeE9RU3hPUVN4T1FTeE9RU3hPUVgwaUlISmxkRDBpYmlJZ2RITTlJakl3TVRndE1EZ3RNakJVTVRNNk1qUTZNekl1TURNNEt6QTFPak13SWlCMGVHNDlJbFZMUXpwRVQwbFVTRkpIVDFaQlZWUklNakF4T0RBNE1qTXlNREV3T1RFMU16TTFJajQ4VTJsbmJtRjBkWEpsSUhodGJHNXpQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh5TURBd0x6QTVMM2h0YkdSemFXY2pJajQ4VTJsbmJtVmtTVzVtYno0OFEyRnViMjVwWTJGc2FYcGhkR2x2YmsxbGRHaHZaQ0JCYkdkdmNtbDBhRzA5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTDFSU0x6SXdNREV2VWtWRExYaHRiQzFqTVRSdUxUSXdNREV3TXpFMUlpOCtQRk5wWjI1aGRIVnlaVTFsZEdodlpDQkJiR2R2Y21sMGFHMDlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdk1Ea3ZlRzFzWkhOcFp5TnljMkV0YzJoaE1TSXZQanhTWldabGNtVnVZMlVnVlZKSlBTSWlQanhVY21GdWMyWnZjbTF6UGp4VWNtRnVjMlp2Y20wZ1FXeG5iM0pwZEdodFBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3THpBNUwzaHRiR1J6YVdjalpXNTJaV3h2Y0dWa0xYTnBaMjVoZEhWeVpTSXZQand2VkhKaGJuTm1iM0p0Y3o0OFJHbG5aWE4wVFdWMGFHOWtJRUZzWjI5eWFYUm9iVDBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01TOHdOQzk0Yld4bGJtTWpjMmhoTWpVMklpOCtQRVJwWjJWemRGWmhiSFZsUG1ZeFkwZE5ObGx0YjJoU1QwdHdWMlJoUVRKd1FuWjRXR1ZNT0V4NWFIcG9ZMUEyWWtrcmNGVlVia0U5UEM5RWFXZGxjM1JXWVd4MVpUNDhMMUpsWm1WeVpXNWpaVDQ4TDFOcFoyNWxaRWx1Wm04K1BGTnBaMjVoZEhWeVpWWmhiSFZsUGxaclRIRmhZbGQxT1RoU1NreGtNbEF5UlVzNWRERjVOMUp4Y0VWU01VZ3diMFZZZFRjeFMyNHdjRVJ2TUhCV2FIUnpZbEpEY0VzcmJIZDNVR3hZVjFSYVJuUjZMekpSYzFBcloyNEtNV2RvTlhoeFNtOU5RelpYTldkcmFGWXJiWGhUUVdKMWVtbFFTbVZtVWtsTlRIa3dkMVZDYnpFMlEzZEZOazAyTlVkWmNHbE1PVXRKZFVJMWRFaDJkazAxUW1SS0x6ZHVPRU5vZFFwak5HRkZPWFZFYW5sVVZXYzVRVVJ3V201eVdXRXJWVGxrUlM5dFFqVkJUR1ZwVHpBd04zTlVZV1IyZGtkTVVHbE9iREEwV0ZWSGRFeDJWMDFYZGpSVFdIQTNTVUpyTDBKUFZtZDZDaTl4UVRjMllXaEpibVJ4UWxRNFIzRmFTRTFNVWtKWVluQk5OREU0WVRKVmFVdzFiVlkyYnpWalR5OHpUMVZRYzNWNlZ5dExiSFY0ZG1kME16WTNiV3B4VXpsUGRtbFhhU3RQY2xRS2MxVTVWVzVzU1VVdllqRTJhRWwyVjJwdGJ6UklTMHA0T0hKaE0weERXSFZaUmtNMVpIYzlQVHd2VTJsbmJtRjBkWEpsVm1Gc2RXVStQQzlUYVdkdVlYUjFjbVUrUEM5QmRYUm9VbVZ6UGc9PTwvUmFyPjxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+PFJlZmVyZW5jZSBVUkk9IiI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz48RGlnZXN0VmFsdWU+STdCS0JFK0VSZlhMLzBkQjNDYlJmK091R2Z0UExhSGdhOGpuU3FtN3R4MD08L0RpZ2VzdFZhbHVlPjwvUmVmZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU+WmNFeHJTV2dwYXR3L0JqbDZ1WVdJc3BlajFBUlZ2T1dZNHVab1RET0I4WXI0cm9pblI2Vjc2S0U5S1lpeTdibmJGTTBJL1pkMlZiTQowMmQ4Z3VXam52MGduRGtOVWVLMERWQ0dBTDhtaHB4RXdONnByemliY2UrNG1QSzNhRTEvcC84Ni9nQnlyY0xNZ3NROHh5RjBhS1BpCkMraVMrQ050RWJjWTJSNTMvdzR5NFlnbkMwUTdTMVg5aDVyaGw1YkhWeTQ3b0I1SDJUenZrd2FZODBsTW9IWmFiS3hvcEl5UGFnNS8KNDk4Nkl1Nkk5dml0ckhZb2NtYU5SbGpXTUc1YklTTlU5SVlQd3hlU1dQT0dLN2J0Yzc0azRPMDl2cFppMHUycHRPdnk5UDhXZHZlbQpLSUc3LzFOb0xOZlE5WCtFK2NCSmJXeTlHMmUxeU52WkdSNTFnQT09PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE+PFg1MDlTdWJqZWN0TmFtZT5DTj1EUyBVTklRVUUgSURFTlRJRklDQVRJT04gQVVUSE9SSVRZIE9GIElORElBIDYsMi41LjQuNTE9IzEzMzE0MTYxNjQ2ODYxNjE3MjIwNDM2ZjZkNzA2YzY1NzgyMDRlNzQ2OTIwNGM2MTc5NmY3NTc0MjA1NDYxNzQ2MTIwNGU2MTY3NjE3MjIwNGI2ZjY0Njk2NzY1Njg2MTZjNmM2OSxTVFJFRVQ9QmFuZ2Fsb3JlLFNUPUthcm5hdGFrYSwyLjUuNC4xNz0jMTMwNjM1MzYzMDMwMzkzMixPVT1UZWNobm9sb2d5IENlbnRyZSxPPVVJREFJLEM9SU48L1g1MDlTdWJqZWN0TmFtZT48WDUwOUNlcnRpZmljYXRlPk1JSUYrakNDQk9LZ0F3SUJBZ0lFQU5mSVlqQU5CZ2txaGtpRzl3MEJBUXNGQURDQmt6RUxNQWtHQTFVRUJoTUNTVTR4S2pBb0JnTlYKQkFvVElXVk5kV1JvY21FZ1EyOXVjM1Z0WlhJZ1UyVnlkbWxqWlhNZ1RHbHRhWFJsWkRFZE1Cc0dBMVVFQ3hNVVEyVnlkR2xtZVdsdQpaeUJCZFhSb2IzSnBkSGt4T1RBM0JnTlZCQU1UTUdVdFRYVmthSEpoSUZOMVlpQkRRU0JEYkdGemN5QXpJR1p2Y2lCRWIyTjFiV1Z1CmRDQlRhV2R1WlhJZ01qQXhOREFlRncweE56QTJNVGN3T0RVeU1EVmFGdzB5TURBMk1UWXdPRFV5TURWYU1JSG1NUXN3Q1FZRFZRUUcKRXdKSlRqRU9NQXdHQTFVRUNoTUZWVWxFUVVreEdqQVlCZ05WQkFzVEVWUmxZMmh1YjJ4dloza2dRMlZ1ZEhKbE1ROHdEUVlEVlFRUgpFd1kxTmpBd09USXhFakFRQmdOVkJBZ1RDVXRoY201aGRHRnJZVEVTTUJBR0ExVUVDUk1KUW1GdVoyRnNiM0psTVRvd09BWURWUVF6CkV6RkJZV1JvWVdGeUlFTnZiWEJzWlhnZ1RuUnBJRXhoZVc5MWRDQlVZWFJoSUU1aFoyRnlJRXR2WkdsblpXaGhiR3hwTVRZd05BWUQKVlFRREV5MUVVeUJWVGtsUlZVVWdTVVJGVGxSSlJrbERRVlJKVDA0Z1FWVlVTRTlTU1ZSWklFOUdJRWxPUkVsQklEWXdnZ0VpTUEwRwpDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2xoVFExL1VMcXlHR01CYVJSU1VvamRhajJObG1lU3JJUTAvTGtGL0JnCk1Gd3RZdWtzMU5qNFRJUW1TYUtYZDVMMU5hdGs1R0pxRGhYN0JKNjNmRXhOVmtiU1puZ2IyUTBkRXpaUDExSkZLTmFiTHk4WFp6NEkKNUhXbk9pS2R1WllJUmpVK0JjUnVEekdKZHNlUjFQY1F0bHZReFp4RE1MSWpNbXNBZ3JlK3QzU3lZa3Jtd0FZa0VzUnlrakRvaXBSdQpyb2VPd212SUZFMWNRdElxbTBlQ0I3ZjJ3dnhWam8vL21qZURvM1N2T3ZWS1FaMDhDUVFxWk5FT203WlowYlI3ZTZHcFRhYTZ0djhrCmhseUR3MDZ6UXhERDZjcWU5a1pNUy8wam9jQ2UxZ0daaHgyRmZnMkxNcjY4dDZFdWJHUzc4TStpUmgvdWpnWWhNRFBraUxKekFnTUIKQUFHamdnSC9NSUlCK3pBVEJnTlZIU01FRERBS2dBaE53enBmNnRlUDVEQWRCZ05WSFE0RUZnUVVwdlNldEVFT1k2TGhCREF0ZWovYwpZUjNnZTFvd0RnWURWUjBQQVFIL0JBUURBZ2JBTUNJR0ExVWRFUVFiTUJtQkYyRnVkWEF1YTNWdFlYSkFkV2xrWVdrdWJtVjBMbWx1Ck1JSFNCZ05WSFNBRWdjb3dnY2N3TFFZR1lJSmtaQUlETUNNd0lRWUlLd1lCQlFVSEFnSXdGUm9UUTJ4aGMzTWdNeUJEWlhKMGFXWnAKWTJGMFpUQkVCZ1pnZ21Sa0NnRXdPakE0QmdnckJnRUZCUWNDQWpBc0dpcFBjbWRoYm1sellYUnBiMjVoYkNCRWIyTjFiV1Z1ZENCVAphV2R1WlhJZ1EyVnlkR2xtYVdOaGRHVXdVQVlIWUlKa1pBRUlBakJGTUVNR0NDc0dBUVVGQndJQkZqZG9kSFJ3T2k4dmQzZDNMbVV0CmJYVmthSEpoTG1OdmJTOXlaWEJ2YzJsMGIzSjVMMk53Y3k5bExVMTFaR2h5WVY5RFVGTXVjR1JtTUhjR0NDc0dBUVVGQndFQkJHc3cKYVRBa0JnZ3JCZ0VGQlFjd0FZWVlhSFIwY0RvdkwyOWpjM0F1WlMxdGRXUm9jbUV1WTI5dE1FRUdDQ3NHQVFVRkJ6QUNoalZvZEhSdwpPaTh2ZDNkM0xtVXRiWFZrYUhKaExtTnZiUzl5WlhCdmMybDBiM0o1TDJOaFkyVnlkSE12Wkc5alkyd3pMbU55ZERCREJnTlZIUjhFClBEQTZNRGlnTnFBMGhqSm9kSFJ3T2k4dmQzZDNMbVV0YlhWa2FISmhMbU52YlM5eVpYQnZjMmwwYjNKNUwyTnliSE12Wkc5alkyd3oKTG1OeWJEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFHbDNwSGVScDJCdE96cWVYcllmYlpXWTl5bXlDYVdka0NwYnRCUjN6M1l2ZwpnQWlNdGlTNnkwa25jeGt3VEkvVjhpUE8vV0drS1V4UUhSd1hoNmRab284UzVJbWduZGF1YnVYYXpaTm52dUxuc3RJcU92bDhhOGJSCmtZNlpwU2dvc254QlZTSHJzSmdIK2NPYmVUY0V6M1dTOU5Ea241L3dwNVFRZWVST0YwNFg4L1RNWHJwT0pPamhMcTU0SmFzdktBRXMKaWUzc3c5am4vK3Q0REpVYVB4M0VPK2VtdUFtaVhRckEwTzJIZXFkOVAxWTIzL3pwVGl0WU5FeHNLNWxadmFMV2RDKzY5L2JneVIycQpHS0VaQ0RtUGZHRk5Xd0w4OHkrM3RhTjFUd2o2U1B4eHpzemYwRitPTEk1YWpibTlNYjJnYjRIMTJra3VFL2NQbkJsdnZnPT08L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48L0t5Y1Jlcz4=</kycRes></Resp>";
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		Document doc=(Document) builder.parse(new InputSource(new StringReader(str)));
		/*org.w3c.dom.Element root = doc.getDocumentElement();
		System.out.println(root.toString());
		System.out.println(doc.getOwnerDocument());
		System.out.println(doc.getDocumentElement().getTextContent());
		//System.out.println(doc.);
*/		
		System.out.println("method :: "+getStringFromDocument(doc));
	}
	
	
	
	//method to convert Document to String
	public static String getStringFromDocument(Document doc)
	{
	    try
	    {
	       DOMSource domSource = new DOMSource(doc);
	       StringWriter writer = new StringWriter();
	       StreamResult result = new StreamResult(writer);
	       TransformerFactory tf = TransformerFactory.newInstance();
	       Transformer transformer = tf.newTransformer();
	       transformer.transform(domSource, result);
	       return writer.toString();
	    }
	    catch(TransformerException ex)
	    {
	       ex.printStackTrace();
	       return null;
	    }
	}
}
